pub const Key = enum(u8) {
    zero,
    one,
    two,
    three,
    four,
    five,
    six,
    seven,
    eight,
    nine,
    numpad_0,
    numpad_1,
    numpad_2,
    numpad_3,
    numpad_4,
    numpad_5,
    numpad_6,
    numpad_7,
    numpad_8,
    numpad_9,
    numpad_decimal,
    numpad_add,
    numpad_subtract,
    numpad_multiply,
    numpad_divide,
    numpad_lock,
    numpad_enter,
    a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    i,
    j,
    k,
    l,
    m,
    n,
    o,
    p,
    q,
    r,
    s,
    t,
    u,
    v,
    w,
    x,
    y,
    z,
    up,
    down,
    right,
    left,
    period,
    comma,
    left_shift,
    right_shift,
    left_ctrl,
    right_ctrl,
    left_alt,
    right_alt,
    insert,
    delete,
    home,
    end,
    page_up,
    page_down,
    print_screen,
    scroll_lock,
    pause,
    escape,
    tab,
    caps_lock,
    left_super,
    right_super,
    space,
    backspace,
    enter,
    menu,
    slash,
    back_slash,
    minus,
    equal,
    apostrophe,
    semicolon,
    left_bracket,
    right_bracket,
    tilde,
    f1,
    f2,
    f3,
    f4,
    f5,
    f6,
    f7,
    f8,
    f9,
    f10,
    f11,
    f12,
    oem_1,
    oem_2,
    max,
    none,
};

pub const Mouse = enum(u8) {
    left,
    middle,
    right,
    one,
    two,
    max,
    none,
};

pub const Event = union(enum) {
    Destroy: void,
    Resize: struct { u32, u32 },
    Move: struct { u32, u32 },
    KeyPress: Key,
    KeyRelease: Key,
    MousePress: Mouse,
    MouseRelease: Mouse,
    MouseScrollV: i8,
    MouseScrollH: i8,
    MouseMove: struct { u32, u32 },
    FocusIn: void,
    FocusOut: void,
};

const Self = @This();

handle: ?*anyopaque,

handle_event_fn: *const fn (?*anyopaque, Event) void,

pub fn handleEvent(self: Self, event: Event) void {
    self.handle_event_fn(self.handle, event);
}
